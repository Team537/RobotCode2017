package org.team537.robot.subsystems;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.Timer;
import java.util.TimerTask;

import org.team537.robot.Robot;
import org.team537.robot.RobotMap;
import org.team537.robot.commands.ShooterDefault;
import org.team537.robot.toolbox.Maths;

public class Shooter extends Subsystem {
	private final CANTalon shooter1 = new CANTalon(RobotMap.CAN.SHOOTER_1);
	private final CANTalon shooter2 = new CANTalon(RobotMap.CAN.SHOOTER_2);

	private double rateBaseSpeed;
	private double rateScalar;

	public Shooter() {
		shooter1.changeControlMode(TalonControlMode.PercentVbus);
		shooter1.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		shooter1.configEncoderCodesPerRev(1024);
		shooter1.enable();

		shooter2.changeControlMode(TalonControlMode.PercentVbus);
		shooter2.enable();

		Timer timerDashboard = new Timer();
		timerDashboard.schedule(new TimerTask() {
			@Override
			public void run() {
				dashboard();
			}
		}, 0, 100);
		
		rateBaseSpeed = 1.0;
		rateScalar = 1.0;
	}

	@Override
	protected void initDefaultCommand() {
		setDefaultCommand(new ShooterDefault());
	}

	public void shoot(double rate) {
		rateBaseSpeed = (-Robot.oi.joystickPrimary.getRawAxis(RobotMap.JoystickAxesX3D.SLIDER) + 1.0) / 2.0;
		
		if (Robot.oi.joystickPrimary.getRawButton(RobotMap.JoystickKeysX3D.STICK_5)) {
			rateScalar += 0.25 * (1.0 / 20.0);
		} else if (Robot.oi.joystickPrimary.getRawButton(RobotMap.JoystickKeysX3D.STICK_3)) {
			rateScalar -= 0.25 * (1.0 / 20.0);
		}
		
		rate = Maths.roundToPlace(rateBaseSpeed * rateScalar, 3);

		SmartDashboard.putNumber("Shooter Rate [Testing]", rate);
		shooter1.set(-rate); // TODO: Convert M/S => Encoder Ticks / Second.
		shooter2.set(rate);
	}

	public void reset() {
		shooter1.enable();
		shooter1.setPosition(0.0);
		shooter1.set(0.0);
		

		shooter2.enable();
		shooter2.setPosition(0.0);
		shooter2.set(0.0);
	}

	public void stop() {
		shooter1.set(0.0);
		shooter2.set(0.0);
	}

	public void dashboard() {
		SmartDashboard.putNumber("Shooter Rate Base Speed", Maths.roundToPlace(rateBaseSpeed, 3));
		SmartDashboard.putNumber("Shooter Rate Scalar", Maths.roundToPlace(rateScalar, 3));
		SmartDashboard.putNumber("Shooter Setpoint", shooter1.get());
		SmartDashboard.putNumber("Shooter Encoder Velocity", shooter1.getEncVelocity());
		SmartDashboard.putNumber("Shooter Encoder Position", shooter1.getEncPosition());
	}
}
