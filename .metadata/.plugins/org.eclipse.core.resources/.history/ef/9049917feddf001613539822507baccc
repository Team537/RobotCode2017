package org.team537.robot.subsystems;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.Timer;
import java.util.TimerTask;

import org.team537.robot.Robot;
import org.team537.robot.RobotMap;
import org.team537.robot.commands.ShooterDefault;
import org.team537.robot.toolbox.Maths;

public class Shooter extends Subsystem {
	private final CANTalon shooter1 = new CANTalon(RobotMap.CAN.SHOOTER_1);
	private final CANTalon shooter2 = new CANTalon(RobotMap.CAN.SHOOTER_2);

	private double rateScalar;
	private boolean enabledWheel1;
	private boolean enabledWheel2;
	private int wheelSpeed1;

	public Shooter() {
		shooter1.changeControlMode(TalonControlMode.PercentVbus);
		shooter1.enable();
		
		shooter2.changeControlMode(TalonControlMode.PercentVbus);
		shooter2.enable();
		
		rateScalar = 0.0;
		enabledWheel1 = false;
		enabledWheel2 = false;
		wheelSpeed1 = 4;

		Timer timerDashboard = new Timer();
		timerDashboard.schedule(new TimerTask() {
			@Override
			public void run() {
				dashboard();
			}
		}, 0, 100);
	}
	
	public void callMeDumb() {
		new JoystickButton(Robot.oi.joystickPrimary, RobotMap.JoystickKeysX3D.STICK_5).whenActive(new Command() {
			private boolean done;
			
			@Override
			protected void initialize() {
				done = false;
			}

			@Override
			protected void execute() {
				enabledWheel1 = !enabledWheel1;
				done = true;
			}

			@Override
			protected boolean isFinished() {
				return done;
			}
			
		});
		new JoystickButton(Robot.oi.joystickPrimary, RobotMap.JoystickKeysX3D.STICK_3).whenActive(new Command() {
			private boolean done;
			
			@Override
			protected void initialize() {
				done = false;
			}

			@Override
			protected void execute() {
				enabledWheel2 = !enabledWheel2;
				done = true;
			}

			@Override
			protected boolean isFinished() {
				return done;
			}
			
		});

		new JoystickButton(Robot.oi.joystickPrimary, RobotMap.JoystickKeysX3D.BASE_10).whenActive(new Command() {
			private boolean done;
			
			@Override
			protected void initialize() {
				done = false;
			}
			
			@Override
			protected void execute() {
				wheelSpeed1++;
				
				if (wheelSpeed1 > 7) {
					wheelSpeed1 = 0;
				}
				
				done = true;
			}

			@Override
			protected boolean isFinished() {
				return done;
			}
			
		});
	}

	@Override
	protected void initDefaultCommand() {
		setDefaultCommand(new ShooterDefault());
	}

	public void shoot(double rate) {
		SmartDashboard.putNumber("Shooter Setpoint", rate);
		SmartDashboard.putBoolean("Shooter Wheel 2 Enabled", enabledWheel1);
		SmartDashboard.putBoolean("Shooter Wheel 1 Enabled", enabledWheel2);
		SmartDashboard.putNumber("Shooter Wheel Speed (7 Speed)", wheelSpeed1);
		
		rateScalar = (-Robot.oi.joystickPrimary.getRawAxis(RobotMap.JoystickAxesX3D.SLIDER) + 1.0) / 2.0;
		
		rate = Maths.roundToPlace(rateScalar, 3); //  * 1024 * 3
		if (enabledWheel1) {
			shooter2.set(-rate); // TODO: Convert M/S => Encoder Ticks / Second.
		} else {
			shooter2.set(0.0);
		}
		if (enabledWheel2) {
		shooter1.set(rate * (wheelSpeed1  / 7.0)); 
		}else {
			shooter1.set(0.0);
		}
	}

	public void reset() {
		shooter1.enable();
		shooter2.setPosition(0.0);
		shooter2.set(0.0);
		
		shooter2.enable();
		shooter2.setPosition(0.0);
		shooter2.set(0.0);
	}

	public void stop() {
		shooter1.set(0.0);
		shooter2.set(0.0);
	}

	public void dashboard() {
		SmartDashboard.putNumber("Shooter Rate Scalar", Maths.roundToPlace(rateScalar, 3));
		SmartDashboard.putNumber("Shooter Encoder Velocity", shooter2.getEncVelocity());
		SmartDashboard.putNumber("Shooter Encoder Position", shooter2.getEncPosition());
		SmartDashboard.putNumber("Shooter Voltage 1", shooter1.getBusVoltage());
		SmartDashboard.putNumber("Shooter Voltage 2", shooter2.getBusVoltage());
	}
}
